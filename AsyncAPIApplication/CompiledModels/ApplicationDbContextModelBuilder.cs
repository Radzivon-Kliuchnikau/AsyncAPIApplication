// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace AsyncAPIApplication.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        private ApplicationDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("ca0e2e44-fc9d-4d6c-a139-331cf3e5ee6a"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var listOfRequests = ListOfRequestsEntityType.Create(this);

            ListOfRequestsEntityType.CreateAnnotations(listOfRequests);

            AddAnnotation("ProductVersion", "9.0.0-preview.7.24405.3");
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var listOfRequests = FindEntityType("AsyncAPIApplication.Models.ListOfRequests")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            listOfRequests.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var asyncAPIApplicationModelsListOfRequestsTableBase = new TableBase("AsyncAPIApplication.Models.ListOfRequests", null, relationalModel);
            var estimatedTimeToCompleteTheTaskColumnBase = new ColumnBase<ColumnMappingBase>("EstimatedTimeToCompleteTheTask", "TEXT", asyncAPIApplicationModelsListOfRequestsTableBase)
            {
                IsNullable = true
            };
            asyncAPIApplicationModelsListOfRequestsTableBase.Columns.Add("EstimatedTimeToCompleteTheTask", estimatedTimeToCompleteTheTaskColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", asyncAPIApplicationModelsListOfRequestsTableBase);
            asyncAPIApplicationModelsListOfRequestsTableBase.Columns.Add("Id", idColumnBase);
            var requestBodyColumnBase = new ColumnBase<ColumnMappingBase>("RequestBody", "TEXT", asyncAPIApplicationModelsListOfRequestsTableBase)
            {
                IsNullable = true
            };
            asyncAPIApplicationModelsListOfRequestsTableBase.Columns.Add("RequestBody", requestBodyColumnBase);
            var requestIdColumnBase = new ColumnBase<ColumnMappingBase>("RequestId", "TEXT", asyncAPIApplicationModelsListOfRequestsTableBase);
            asyncAPIApplicationModelsListOfRequestsTableBase.Columns.Add("RequestId", requestIdColumnBase);
            var statusOfRequestColumnBase = new ColumnBase<ColumnMappingBase>("StatusOfRequest", "TEXT", asyncAPIApplicationModelsListOfRequestsTableBase)
            {
                IsNullable = true
            };
            asyncAPIApplicationModelsListOfRequestsTableBase.Columns.Add("StatusOfRequest", statusOfRequestColumnBase);
            relationalModel.DefaultTables.Add("AsyncAPIApplication.Models.ListOfRequests", asyncAPIApplicationModelsListOfRequestsTableBase);
            var asyncAPIApplicationModelsListOfRequestsMappingBase = new TableMappingBase<ColumnMappingBase>(listOfRequests, asyncAPIApplicationModelsListOfRequestsTableBase, null);
            asyncAPIApplicationModelsListOfRequestsTableBase.AddTypeMapping(asyncAPIApplicationModelsListOfRequestsMappingBase, false);
            defaultTableMappings.Add(asyncAPIApplicationModelsListOfRequestsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, listOfRequests.FindProperty("Id")!, asyncAPIApplicationModelsListOfRequestsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)estimatedTimeToCompleteTheTaskColumnBase, listOfRequests.FindProperty("EstimatedTimeToCompleteTheTask")!, asyncAPIApplicationModelsListOfRequestsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)requestBodyColumnBase, listOfRequests.FindProperty("RequestBody")!, asyncAPIApplicationModelsListOfRequestsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)requestIdColumnBase, listOfRequests.FindProperty("RequestId")!, asyncAPIApplicationModelsListOfRequestsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusOfRequestColumnBase, listOfRequests.FindProperty("StatusOfRequest")!, asyncAPIApplicationModelsListOfRequestsMappingBase);

            var tableMappings = new List<TableMapping>();
            listOfRequests.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var requestsTable = new Table("Requests", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", requestsTable);
            requestsTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn);
            var estimatedTimeToCompleteTheTaskColumn = new Column("EstimatedTimeToCompleteTheTask", "TEXT", requestsTable)
            {
                IsNullable = true
            };
            requestsTable.Columns.Add("EstimatedTimeToCompleteTheTask", estimatedTimeToCompleteTheTaskColumn);
            estimatedTimeToCompleteTheTaskColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(estimatedTimeToCompleteTheTaskColumn);
            var requestBodyColumn = new Column("RequestBody", "TEXT", requestsTable)
            {
                IsNullable = true
            };
            requestsTable.Columns.Add("RequestBody", requestBodyColumn);
            requestBodyColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(requestBodyColumn);
            var requestIdColumn = new Column("RequestId", "TEXT", requestsTable);
            requestsTable.Columns.Add("RequestId", requestIdColumn);
            requestIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(requestIdColumn);
            var statusOfRequestColumn = new Column("StatusOfRequest", "TEXT", requestsTable)
            {
                IsNullable = true
            };
            requestsTable.Columns.Add("StatusOfRequest", statusOfRequestColumn);
            statusOfRequestColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(statusOfRequestColumn);
            relationalModel.Tables.Add(("Requests", null), requestsTable);
            var requestsTableMapping = new TableMapping(listOfRequests, requestsTable, null);
            requestsTable.AddTypeMapping(requestsTableMapping, false);
            tableMappings.Add(requestsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, listOfRequests.FindProperty("Id")!, requestsTableMapping);
            RelationalModel.CreateColumnMapping(estimatedTimeToCompleteTheTaskColumn, listOfRequests.FindProperty("EstimatedTimeToCompleteTheTask")!, requestsTableMapping);
            RelationalModel.CreateColumnMapping(requestBodyColumn, listOfRequests.FindProperty("RequestBody")!, requestsTableMapping);
            RelationalModel.CreateColumnMapping(requestIdColumn, listOfRequests.FindProperty("RequestId")!, requestsTableMapping);
            RelationalModel.CreateColumnMapping(statusOfRequestColumn, listOfRequests.FindProperty("StatusOfRequest")!, requestsTableMapping);
            var pK_Requests = new UniqueConstraint("PK_Requests", requestsTable, new[] { idColumn });
            requestsTable.PrimaryKey = pK_Requests;
            pK_Requests.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pK_Requests));
            var pK_RequestsKey = RelationalModel.GetKey(this,
                "AsyncAPIApplication.Models.ListOfRequests",
                new[] { "Id" });
            pK_Requests.MappedKeys.Add(pK_RequestsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RequestsKey).Add(pK_Requests);
            requestsTable.UniqueConstraints.Add("PK_Requests", pK_Requests);
            return relationalModel.MakeReadOnly();
        }
    }
}
